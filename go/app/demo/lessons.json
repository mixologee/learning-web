[
    {
        "topic":  "01 .   Hello World",
        "name":  "Hello World",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e01 .   Hello World: Hello World\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir HelloWorld\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport (\u003c/br\u003e\t\"fmt\"\u003c/br\u003e)\u003c/br\u003efunc main() {\u003c/br\u003e\tfmt.Println(\"Hello World!\")\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Hello World!\u003c/p\u003e"
    },
    {
        "topic":  "02 .   Understanding Types",
        "name":  "Booleans",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e02 .   Understanding Types: Booleans\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir Booleans\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport (\u003c/br\u003e\t\"fmt\"\u003c/br\u003e)\u003c/br\u003efunc main() {\u003c/br\u003e\tvar b bool\u003c/br\u003e\tfmt.Println(b)\u003c/br\u003e\tb = true\u003c/br\u003e\tfmt.Println(b)\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Booleans!\u003c/p\u003e"
    },
    {
        "topic":  "02 .   Understanding Types",
        "name":  "Convert Types",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e02 .   Understanding Types: Convert Types\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir ConvertTypes\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport (\u003c/br\u003e\t\"fmt\"\u003c/br\u003e\t\"reflect\"\u003c/br\u003e\t\"strconv\"\u003c/br\u003e)\u003c/br\u003efunc main() {\u003c/br\u003e\tvar b bool = true\u003c/br\u003e\tfmt.Println(reflect.TypeOf(b))\u003c/br\u003e\tvar s string = strconv.FormatBool(true)\u003c/br\u003e\tfmt.Println(reflect.TypeOf(s))\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Convert Types!\u003c/p\u003e"
    },
    {
        "topic":  "02 .   Understanding Types",
        "name":  "Errors",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e02 .   Understanding Types: Errors\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir Errors\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport (\u003c/br\u003e\t\"fmt\"\u003c/br\u003e)\u003c/br\u003efunc addition(x int, y int) int {\u003c/br\u003e\treturn x + y\u003c/br\u003e}\u003c/br\u003efunc main() {\u003c/br\u003e\tvar s string = \"three\"\u003c/br\u003e\tfmt.Println(addition(1, 2))\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Errors!\u003c/p\u003e"
    },
    {
        "topic":  "02 .   Understanding Types",
        "name":  "Intro Types",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e02 .   Understanding Types: Intro Types\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir IntroTypes\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport (\u003c/br\u003e\t\"fmt\"\u003c/br\u003e)\u003c/br\u003efunc sayHello(s string) string {\u003c/br\u003e\treturn \"Hello \" + s\u003c/br\u003e}\u003c/br\u003efunc main() {\u003c/br\u003e\tfmt.Println(sayHello(\"Your Name\"))\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Intro Types!\u003c/p\u003e"
    },
    {
        "topic":  "02 .   Understanding Types",
        "name":  "Var Types",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e02 .   Understanding Types: Var Types\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir VarTypes\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport (\u003c/br\u003e\t\"fmt\"\u003c/br\u003e\t\"reflect\"\u003c/br\u003e)\u003c/br\u003efunc main() {\u003c/br\u003e\tvar s string = \"string\"\u003c/br\u003e\tvar i int = 10\u003c/br\u003e\tvar f float32 = 1.2\u003c/br\u003e\tfmt.Println(reflect.TypeOf(s))\u003c/br\u003e\tfmt.Println(reflect.TypeOf(i))\u003c/br\u003e\tfmt.Println(reflect.TypeOf(f))\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Var Types!\u003c/p\u003e"
    },
    {
        "topic":  "03 .   Understanding Variables",
        "name":  "Constant Variables",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e03 .   Understanding Variables: Constant Variables\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir ConstantVariables\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport (\u003c/br\u003e\t\"fmt\"\u003c/br\u003e)\u003c/br\u003econst s string = \"Hello World!\"\u003c/br\u003efunc main() {\u003c/br\u003e\t// uncomment below to see what happens when you try to assign\u003c/br\u003e\t// a value to a constant variable\u003c/br\u003e\t//s = \"The end is nigh!\"\u003c/br\u003e\tfmt.Println(s)\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Constant Variables!\u003c/p\u003e"
    },
    {
        "topic":  "03 .   Understanding Variables",
        "name":  "Shorthand Variables",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e03 .   Understanding Variables: Shorthand Variables\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir ShorthandVariables\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport (\u003c/br\u003e\t\"fmt\"\u003c/br\u003e)\u003c/br\u003efunc main() {\u003c/br\u003e\t//shorthand example 1\u003c/br\u003e\tvar s, t string = \"foo\", \"bar\"\u003c/br\u003e\tfmt.Println(s)\u003c/br\u003e\tfmt.Println(t)\u003c/br\u003e\t//shorthand exampl 2\u003c/br\u003e\tvar (\u003c/br\u003e\t\ts2 string = \"foo\"\u003c/br\u003e\t\ti  int    = 42\u003c/br\u003e\t)\u003c/br\u003e\tfmt.Println(s2)\u003c/br\u003e\tfmt.Println(i)\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Shorthand Variables!\u003c/p\u003e"
    },
    {
        "topic":  "03 .   Understanding Variables",
        "name":  "Short Variable",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e03 .   Understanding Variables: Short Variable\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir ShortVariable\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport (\u003c/br\u003e\t\"fmt\"\u003c/br\u003e\t\"reflect\"\u003c/br\u003e)\u003c/br\u003efunc main() {\u003c/br\u003e\t// when using this method, the variable type is inferred by the compiler\u003c/br\u003e\ts := \"Hello World!\"\u003c/br\u003e\ti := 42\u003c/br\u003e\tf := 42.0\u003c/br\u003e\tfmt.Println(s)\u003c/br\u003e\tfmt.Println(i)\u003c/br\u003e\tfmt.Println(f)\u003c/br\u003e\tfmt.Println(\"s is inferred as type \", reflect.TypeOf(s))\u003c/br\u003e\tfmt.Println(\"i is inferred as type \", reflect.TypeOf(i))\u003c/br\u003e\tfmt.Println(\"f is inferred as type \", reflect.TypeOf(f))\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Short Variable!\u003c/p\u003e"
    },
    {
        "topic":  "03 .   Understanding Variables",
        "name":  "Using Pointers",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e03 .   Understanding Variables: Using Pointers\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir UsingPointers\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport (\u003c/br\u003e\t\"fmt\"\u003c/br\u003e)\u003c/br\u003efunc showMemoryAddress(x int) {\u003c/br\u003e\tfmt.Println(\u0026x)\u003c/br\u003e\treturn\u003c/br\u003e}\u003c/br\u003efunc showPointerMemoryAddress(x *int) {\u003c/br\u003e\tfmt.Println(x)\u003c/br\u003e\treturn\u003c/br\u003e}\u003c/br\u003efunc main() {\u003c/br\u003e\ts := \"Hello World!\"\u003c/br\u003e\tfmt.Println(\u0026s)\u003c/br\u003e\t// passing variable as a value, notice the difference in return values\u003c/br\u003e\ti := 42\u003c/br\u003e\tfmt.Println(\u0026i)\u003c/br\u003e\tshowMemoryAddress(i)\u003c/br\u003e\t// passing variable as a pointer, notice the same return values\u003c/br\u003e\tfmt.Println(\u0026i)\u003c/br\u003e\tshowPointerMemoryAddress(\u0026i)\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Using Pointers!\u003c/p\u003e"
    },
    {
        "topic":  "03 .   Understanding Variables",
        "name":  "Variable Declaration Styles",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e03 .   Understanding Variables: Variable Declaration Styles\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir VariableDeclarationStyles\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport (\u003c/br\u003e\t\"fmt\"\u003c/br\u003e)\u003c/br\u003evar s = \"Hello World!\"\u003c/br\u003e// short variable declaration can\u0027t be used outside of a function\u003c/br\u003e//s2 := \"This will cause a compile error\"\u003c/br\u003efunc main() {\u003c/br\u003e\ti := 42\u003c/br\u003e\tfmt.Println(s)\u003c/br\u003e\tfmt.Println(i)\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Variable Declaration Styles!\u003c/p\u003e"
    },
    {
        "topic":  "03 .   Understanding Variables",
        "name":  "Variable Scope",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e03 .   Understanding Variables: Variable Scope\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir VariableScope\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport (\u003c/br\u003e\t\"fmt\"\u003c/br\u003e)\u003c/br\u003e// {} represents a block in code. {}\u0027s with {}\u0027s represent a sub-block\u003c/br\u003e// sub blocks can access parent block variables. Parent blocks CAN NOT access sub-block variables\u003c/br\u003e// variables not in a {} block are access ible by all blocks (global variable)\u003c/br\u003evar s = \"Hello World!\"\u003c/br\u003efunc main() {\u003c/br\u003e\tfmt.Printf(\"Print \u0027s\u0027 from outer block: %v\\n\", s)\u003c/br\u003e\tb := true\u003c/br\u003e\tif b {\u003c/br\u003e\t\tfmt.Printf(\"Print \u0027b\u0027 from outer block: %v\\n\", b)\u003c/br\u003e\t\ti := 42\u003c/br\u003e\t\tif b != false {\u003c/br\u003e\t\t\tfmt.Printf(\"Print \u0027i\u0027 from outer block: %v\\n\", i)\u003c/br\u003e\t\t}\u003c/br\u003e\t\t// uncomment below to show compile errors for trying to access sub-block variable\u003c/br\u003e\t\t// fmt.Printf(\"Print \u0027i\u0027 from outer block: %v\\n\", i)\u003c/br\u003e\t}\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Variable Scope!\u003c/p\u003e"
    },
    {
        "topic":  "03 .   Understanding Variables",
        "name":  "Zero Value Variables",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e03 .   Understanding Variables: Zero Value Variables\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir ZeroValueVariables\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport (\u003c/br\u003e\t\"fmt\"\u003c/br\u003e)\u003c/br\u003efunc main() {\u003c/br\u003e\t// unless specified, variables receive a zero value when created\u003c/br\u003e\tvar s string\u003c/br\u003e\tvar b bool\u003c/br\u003e\tvar i int\u003c/br\u003e\tvar f float64\u003c/br\u003e\tfmt.Printf(\"%q %v %v %v\\n\", s, b, i, f)\u003c/br\u003e\t// we can check for zero values and respond accordingly\u003c/br\u003e\tif s == \"\" {\u003c/br\u003e\t\tfmt.Printf(\"s has not been assigned a value!\\n\")\u003c/br\u003e\t}\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Zero Value Variables!\u003c/p\u003e"
    },
    {
        "topic":  "04 .   Using Functions",
        "name":  "Multiple Results Functions",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e04 .   Using Functions: Multiple Results Functions\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir MultipleResultsFunctions\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport \"fmt\"\u003c/br\u003efunc getPrize() (int, string) {\u003c/br\u003e\ti := 42\u003c/br\u003e\ts := \"universes\"\u003c/br\u003e\treturn i, s\u003c/br\u003e}\u003c/br\u003efunc main() {\u003c/br\u003e\tquantity, prize := getPrize()\u003c/br\u003e\tfmt.Printf(\"You won %v %v\\n\", quantity, prize)\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Multiple Results Functions!\u003c/p\u003e"
    },
    {
        "topic":  "04 .   Using Functions",
        "name":  "Named Return Value Functions",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e04 .   Using Functions: Named Return Value Functions\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir NamedReturnValueFunctions\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport \"fmt\"\u003c/br\u003efunc sayHello() (x, y string) {\u003c/br\u003e\tx = \"Hello\"\u003c/br\u003e\ty = \"World!\"\u003c/br\u003e\treturn\u003c/br\u003e}\u003c/br\u003efunc main() {\u003c/br\u003e\tfmt.Println(sayHello())\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Named Return Value Functions!\u003c/p\u003e"
    },
    {
        "topic":  "04 .   Using Functions",
        "name":  "Passing Functions As Values",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e04 .   Using Functions: Passing Functions As Values\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir PassingFunctionsAsValues\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport \"fmt\"\u003c/br\u003efunc someFunction(f func() string) string {\u003c/br\u003e\treturn f()\u003c/br\u003e}\u003c/br\u003efunc main() {\u003c/br\u003e\tfn := func() string {\u003c/br\u003e\t\treturn \"function called by another function\"\u003c/br\u003e\t}\u003c/br\u003e\tfmt.Println(someFunction(fn))\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Passing Functions As Values!\u003c/p\u003e"
    },
    {
        "topic":  "04 .   Using Functions",
        "name":  "Recursive Functions",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e04 .   Using Functions: Recursive Functions\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir RecursiveFunctions\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport \"fmt\"\u003c/br\u003efunc entertainMe(hours int, fun int) int {\u003c/br\u003e\tfun = hours + fun\u003c/br\u003e\tif fun \u003e= 5 {\u003c/br\u003e\t\tfmt.Printf(\"I\u0027ve had enough fun for one day! It\u0027s been %v hours \\n\", fun)\u003c/br\u003e\t\treturn fun\u003c/br\u003e\t}\u003c/br\u003e\tfmt.Printf(\"I want to have more fun! It\u0027s only been %v hours.\\n\", fun)\u003c/br\u003e\treturn entertainMe(hours, fun)\u003c/br\u003e}\u003c/br\u003efunc main() {\u003c/br\u003e\tfmt.Println(entertainMe(1, 0))\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Recursive Functions!\u003c/p\u003e"
    },
    {
        "topic":  "04 .   Using Functions",
        "name":  "Single Result Functions",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e04 .   Using Functions: Single Result Functions\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir SingleResultFunctions\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport \"fmt\"\u003c/br\u003efunc isEven(i int) bool {\u003c/br\u003e\treturn i%2 == 0\u003c/br\u003e}\u003c/br\u003efunc main() {\u003c/br\u003e\tfmt.Printf(\"Is 1 even? %v\\n\", isEven(1))\u003c/br\u003e\tfmt.Printf(\"Is 2 even? %v\\n\", isEven(2))\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Single Result Functions!\u003c/p\u003e"
    },
    {
        "topic":  "04 .   Using Functions",
        "name":  "Variadic Functions",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e04 .   Using Functions: Variadic Functions\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir VariadicFunctions\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport \"fmt\"\u003c/br\u003efunc sumNumbers(numbers ...int) int {\u003c/br\u003e\tsum := 0\u003c/br\u003e\tfor _, number := range numbers {\u003c/br\u003e\t\tsum += number\u003c/br\u003e\t}\u003c/br\u003e\treturn sum\u003c/br\u003e}\u003c/br\u003efunc main() {\u003c/br\u003e\ttotal := sumNumbers(1, 2, 3, 4)\u003c/br\u003e\tfmt.Printf(\"The total is %v\\n\", total)\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Variadic Functions!\u003c/p\u003e"
    },
    {
        "topic":  "05 .   Using Control Flow",
        "name":  "Using Defer",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e05 .   Using Control Flow: Using Defer\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir UsingDefer\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport \"fmt\"\u003c/br\u003efunc main() {\u003c/br\u003e\tdefer fmt.Println(\"You deferred me first.\")\u003c/br\u003e\tdefer fmt.Println(\"You deferred me second.\")\u003c/br\u003e\tdefer fmt.Println(\"You deferred me third.\")\u003c/br\u003e\tfmt.Println(\"Hellow World!\")\u003c/br\u003e\tdefer fmt.Println(\"You deferred me fourth.\")\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Using Defer!\u003c/p\u003e"
    },
    {
        "topic":  "05 .   Using Control Flow",
        "name":  "Using Else",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e05 .   Using Control Flow: Using Else\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir UsingElse\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport \"fmt\"\u003c/br\u003efunc main() {\u003c/br\u003e\tb := false\u003c/br\u003e\tif b {\u003c/br\u003e\t\tfmt.Println(\"b is true!\")\u003c/br\u003e\t} else {\u003c/br\u003e\t\tfmt.Println(\"b is false!\")\u003c/br\u003e\t}\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Using Else!\u003c/p\u003e"
    },
    {
        "topic":  "05 .   Using Control Flow",
        "name":  "Using Else If",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e05 .   Using Control Flow: Using Else If\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir UsingElseIf\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport \"fmt\"\u003c/br\u003efunc main() {\u003c/br\u003e\ti := 42\u003c/br\u003e\tif i == 41 {\u003c/br\u003e\t\tfmt.Println(\"You don\u0027t know the answer to the universe!\")\u003c/br\u003e\t} else if i == 42 {\u003c/br\u003e\t\tfmt.Println(\"You have the answer to the universe!\")\u003c/br\u003e\t}\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Using Else If!\u003c/p\u003e"
    },
    {
        "topic":  "05 .   Using Control Flow",
        "name":  "Using For",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e05 .   Using Control Flow: Using For\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir UsingFor\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport \"fmt\"\u003c/br\u003efunc main() {\u003c/br\u003e\tnum := 0\u003c/br\u003e\tfmt.Println(\"standard for loop\")\u003c/br\u003e\tfor num \u003c 10 {\u003c/br\u003e\t\tfmt.Println(\"num is \", num)\u003c/br\u003e\t\tnum++\u003c/br\u003e\t}\u003c/br\u003e\tfmt.Println(\"for loop with init and post statements\")\u003c/br\u003e\tfor num := 0; num \u003c 10; num++ {\u003c/br\u003e\t\tfmt.Println(\"num is \", num)\u003c/br\u003e\t}\u003c/br\u003e\tfmt.Println(\"for loop with range clause\")\u003c/br\u003e\tnums := []int{1, 2, 3, 4}\u003c/br\u003e\tfor index, n := range nums {\u003c/br\u003e\t\tfmt.Println(\"The index of the for loop is \", index)\u003c/br\u003e\t\tfmt.Println(\"The value from the array at this index is \", n)\u003c/br\u003e\t}\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Using For!\u003c/p\u003e"
    },
    {
        "topic":  "05 .   Using Control Flow",
        "name":  "Using If",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e05 .   Using Control Flow: Using If\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir UsingIf\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport \"fmt\"\u003c/br\u003efunc main() {\u003c/br\u003e\ti := 1\u003c/br\u003e\tb := true\u003c/br\u003e\tif i == 1 {\u003c/br\u003e\t\tfmt.Println(\"i = 1\")\u003c/br\u003e\t}\u003c/br\u003e\tif b {\u003c/br\u003e\t\tfmt.Println(\"b is true\")\u003c/br\u003e\t}\u003c/br\u003e\tif !b {\u003c/br\u003e\t\tfmt.Println(\"b is false\")\u003c/br\u003e\t}\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Using If!\u003c/p\u003e"
    },
    {
        "topic":  "05 .   Using Control Flow",
        "name":  "Using Operators",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e05 .   Using Control Flow: Using Operators\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir UsingOperators\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport \"fmt\"\u003c/br\u003efunc main() {\u003c/br\u003e\ti1 := 42\u003c/br\u003e\ti2 := 42\u003c/br\u003e\ti3 := 41\u003c/br\u003e\ti4 := 43\u003c/br\u003e\ts1 := \"match\"\u003c/br\u003e\ts2 := \"match\"\u003c/br\u003e\ts3 := \"nomatch\"\u003c/br\u003e\tfmt.Printf(\"%v == %v: %v\\n\", i1, i2, i1 == i2)\u003c/br\u003e\tfmt.Printf(\"%v == %v: %v\\n\", i1, i3, i1 == i3)\u003c/br\u003e\tfmt.Printf(\"%v \u003c %v: %v\\n\", i1, i4, i1 \u003c i4)\u003c/br\u003e\tfmt.Printf(\"%v \u003c= %v: %v\\n\", i1, i2, i1 \u003c= i2)\u003c/br\u003e\tfmt.Printf(\"%v \u003e %v: %v\\n\", i1, i3, i1 \u003e i3)\u003c/br\u003e\tfmt.Printf(\"%v \u003e= %v: %v\\n\", i1, i3, i1 \u003e= i3)\u003c/br\u003e\tfmt.Printf(\"%v + %v: %v\\n\", i1, i3, i1+i3)\u003c/br\u003e\tfmt.Printf(\"%v - %v: %v\\n\", i1, i3, i1-i3)\u003c/br\u003e\tfmt.Printf(\"%v * %v: %v\\n\", i1, i3, i1*i3)\u003c/br\u003e\tfmt.Printf(\"%v / %v: %v\\n\", i1, i3, i1/i3)\u003c/br\u003e\tfmt.Printf(\"%v modulus %v: %v\\n\", i1, i3, i1%i3)\u003c/br\u003e\tfmt.Printf(\"%v matches %v: %v\\n\", s1, s2, s1 == s2)\u003c/br\u003e\tfmt.Printf(\"%v matches %v: %v\\n\", s1, s3, s1 == s3)\u003c/br\u003e\tif i1 == 42 \u0026\u0026 i2 == 42 {\u003c/br\u003e\t\tfmt.Println(\"Universal secret!\")\u003c/br\u003e\t}\u003c/br\u003e\tif i1 == 42 || i2 == 42 {\u003c/br\u003e\t\tfmt.Println(\"Universal secret!\")\u003c/br\u003e\t}\u003c/br\u003e\tif !(i3 == 42) {\u003c/br\u003e\t\tfmt.Printf(\"%v is not a universal secret!\\n\", i3)\u003c/br\u003e\t}\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Using Operators!\u003c/p\u003e"
    },
    {
        "topic":  "05 .   Using Control Flow",
        "name":  "Using Switch",
        "text":  "\u003cp\u003eWelcome to Learning Go @ BlackRock!\u003c/p\u003e05 .   Using Control Flow: Using Switch\u003cp\u003eLet\u0027s get started....\u003c/p\u003e\u003cp\u003eIn the console, type: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003e cd ~/work\u003c/br\u003emkdir UsingSwitch\u003c/br\u003ecd HelloWorld\u003c/p\u003e\u003cp\u003eNow we have our working directory. Now , lets create our code file: \u003c/p\u003e\u003cp class=\u0027codeText\u0027\u003evim main.go\u003c/p\u003e\u003cp\u003eType i to begin editing the file. Now, type the following:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003epackage main\u003c/br\u003eimport \"fmt\"\u003c/br\u003efunc main() {\u003c/br\u003e\tnum := 2\u003c/br\u003e\tstr := \"x\"\u003c/br\u003e\tswitch num {\u003c/br\u003e\tcase 1:\u003c/br\u003e\t\tfmt.Println(\"The number 1.\")\u003c/br\u003e\tcase 2:\u003c/br\u003e\t\tfmt.Println(\"The number 2.\")\u003c/br\u003e\tdefault:\u003c/br\u003e\t\tfmt.Println(\"I don\u0027t recognize that letter.\")\u003c/br\u003e\t}\u003c/br\u003e\tswitch str {\u003c/br\u003e\tcase \"a\":\u003c/br\u003e\t\tfmt.Println(\"The letter a.\")\u003c/br\u003e\tcase \"b\":\u003c/br\u003e\t\tfmt.Println(\"The letter b.\")\u003c/br\u003e\tdefault:\u003c/br\u003e\t\tfmt.Println(\"I don\u0027t recognize that letter.\")\u003c/br\u003e\t}\u003c/br\u003e}\u003c/br\u003e\u003c/p\u003e\u003cp\u003eNow save the file by hitting ESC key typing: :wq!\u003c/p\u003e\u003cp\u003eNow you can run your program by typing:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego run main.go\u003c/p\u003e\u003cp\u003eYou can also compile the code and run by command as follows:\u003c/p\u003e\u003cp  class=\u0027codeText\u0027\u003ego build main.go\u003c/br\u003e./main\u003c/p\u003e\u003cp style=\u0027color:green;\u0027\u003eCongratulations! You have started learning Using Switch!\u003c/p\u003e"
    }
]
